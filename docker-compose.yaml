
services:
  backend:
    build: ./backend
    container_name: backend
    networks:
      - app-network
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - PORT=${BACKEND_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - QDRANT_HOST=${QDRANT_HOST:-qdrant}
      - QDRANT_PORT=${QDRANT_PORT:-6333}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME:-prod2}
      - QDRANT_VECTOR_SIZE=${QDRANT_VECTOR_SIZE:-384}
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama}
      - OLLAMA_PORT=${OLLAMA_PORT:-11434}


    depends_on:
      - postgres
      - redis
      - ollama
      - qdrant
    restart: unless-stopped
    volumes:
      - ./backend/app:/app/app

  frontend:
    build: ./frontend
    container_name: frontend
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - PORT=${FRONTEND_PORT}
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Запуск прокси nginx
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Запуск PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped


  # Запуск Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - app-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes


  # Запуск qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    networks:
      - app-network
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    environment:
      - QDRANT_ALLOW_CORS=true

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks:
      - app-network
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    # Use entrypoint to run shell commands
    entrypoint: ["/bin/sh", "-c"]
    # Then specify the commands to run
    command: >
      "ollama serve & sleep 5 && ollama pull all-minilm && tail -f /dev/null"

  telegram-bot:
    build: ./telegram-bot
    env_file:
      - .env
    environment:
      - BACKEND_BASEURL=${BACKEND_BASEURL}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    networks:
      - app-network
    volumes:
      - ./telegram-bot/app:/app
    restart: unless-stopped


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  ollama_data:

